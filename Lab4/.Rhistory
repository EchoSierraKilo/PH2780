# Naive Bayes
nb_model <- naive_bayes(chosen_formula, data = train_df)
nb_predictions <- predict(nb_model, newdata = test_df)
accuracy_nb <- sum(nb_predictions == test_class) / length(test_class)
models_and_accuracy[["Naive Bayes"]] <- list(model = nb_model, accuracy = accuracy_nb)
# KNN
k <- 10
knn_predictions <- knn(train = train_data, test = test_data, cl = train_class, k = k)
accuracy_knn <- sum(knn_predictions == test_class) / length(test_class)
knn_model <- list(train_data = train_data, train_class = train_class, k = k)
models_and_accuracy[["KNN"]] <- list(model = knn_model, accuracy = accuracy_knn)
return(models_and_accuracy)
}
library(ggplot2)
# Initialize the data frame
model_accuracies <- data.frame()
# Iterate over the subsets
for (subset_name in subset_names) {
train_df <- get(paste0("train_df_std.", subset_name, "_train"))
test_df <- get(paste0("train_df_std.", subset_name, "_test"))
models_and_accuracy <- suppressWarnings(generate_models(subset_name, train_df, test_df))
# Create a data frame to store model accuracies for each subset
subset_model_accuracies <- data.frame(model = names(models_and_accuracy), accuracy = unlist(lapply(models_and_accuracy, function(x) x$accuracy)), stringsAsFactors = FALSE)
subset_model_accuracies$subset_name <- subset_name
# Bind the rows to the model_accuracies data frame
model_accuracies <- rbind(model_accuracies, subset_model_accuracies)
# Find the model with the highest accuracy
best_model <- names(which.max(sapply(models_and_accuracy, function(x) x$accuracy)))
cat("Best model for", subset_name, "is", best_model, "with an accuracy of", models_and_accuracy[[best_model]]$accuracy, "\n")
# Store the best model for this subset
best_models[[subset_name]] <- list(model = models_and_accuracy[[best_model]]$model, accuracy = models_and_accuracy[[best_model]]$accuracy)
}
# Create the ggplot bar chart
ggplot(data = model_accuracies, aes(x = subset_name, y = accuracy, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Model Accuracies by Subset", x = "Subset", y = "Accuracy") +
scale_fill_brewer(palette = "Set1")
# Functions for Ensemble predictions
weighted_prediction <- function(best_models, test_data, chosen_features) {
predictions_list <- mapply(function(subset_name, model, test_data, chosen_features) {
if (inherits(model, "list") && !is.null(model$k)) { # KNN model
common_columns <- intersect(colnames(test_data[[subset_name]]), colnames(model$train_data))
} else if (class(model$finalModel) == "ranger") { # Ranger model
common_columns <- intersect(colnames(test_data[[subset_name]]), model$finalModel$forest$independent.variable.names)
} else if (inherits(model, "nn")) { # Neural Network model
common_columns <- intersect(colnames(test_data[[subset_name]]), colnames(model$data))
} else {
stop("Unsupported model type")
}
test_subset_data <- test_data[[subset_name]][, common_columns]
if (inherits(model, "glm")) {
predict(model, newdata = test_subset_data, type = "response")
} else if (class(model$finalModel) == "ranger") {
predict(model, newdata = test_subset_data, type = "raw")
} else if (inherits(model, "svm")) {
predict(model, newdata = test_subset_data, probability = TRUE)$probabilities[, 2, drop = FALSE]
} else if (inherits(model, "naiveBayes")) {
predict(model, newdata = test_subset_data, type = "raw")[, 1, drop = FALSE]
} else if (inherits(model, "nn")) {
predictions <- compute(model, test_subset_data)$net.result
threshold_func <- function(x) ifelse(x > 0.5, 1, 0)
factor_predictions <- sapply(predictions, threshold_func)
as.factor(factor_predictions)
} else if (inherits(model, "list") && !is.null(model$k)) {
knn(train = model$train_data, test = test_subset_data, cl = model$train_class, k = model$k)
} else {
stop("Unsupported model type")
}
}, subset_name = names(best_models), model = lapply(best_models, `[[`, "model"), test_data = rep(list(test_data), length(names(best_models))), chosen_features = chosen_features, SIMPLIFY = FALSE)
# Convert factors to numeric values
predictions_list <- lapply(predictions_list, function(x) as.numeric(x)-1)
# Calculate normalized weights
models_weights <- lapply(best_models, function(x) x$accuracy)
models_weights_normalized <- unlist(models_weights) / sum(unlist(models_weights))
# Calculate weighted predictions
combined_probs <- Reduce(`+`, mapply(`*`, predictions_list, models_weights_normalized, SIMPLIFY = FALSE))
combined_predictions <- ifelse(combined_probs > 0.5, 1, 0)
return(combined_predictions)
}
# Calculate normalized weights
models_weights <- lapply(models_and_accuracy, function(x) x$accuracy)
models_weights_normalized <- unlist(models_weights) / sum(unlist(models_weights))
# Prepare train_data and test_data for all models
train_data_list <- lapply(names(best_models), function(subset_name) {
train_df <- get(paste0("train_df_std.", subset_name, "_train"))
train_df[, setdiff(names(train_df), "class")]
})
test_data_list <- lapply(names(best_models), function(subset_name) {
test_df <- get(paste0("train_df_std.", subset_name, "_test"))
test_df[, setdiff(names(test_df), "class")]
})
names(test_data_list) <- names(best_models)
# Make weighted ensemble predictions using the trained best models and normalized weights
weighted_predictions <- weighted_prediction(best_models, test_data_list, chosen_features)
# Make weighted ensemble predictions using the trained best models and normalized weights
weighted_predictions <- weighted_prediction(best_models, test_data_list, chosen_features)
# Calculate ensemble accuracy
test_class <- test_df$class
ensemble_accuracy <- sum(weighted_predictions == test_class) / length(test_class)
cat("Ensemble model accuracy:", ensemble_accuracy, "\n")
##################################################################################
#### Part 1 LD calculation
## Q1
lab2.ped <- read.table("/home/public/Lab2/lab2.ped", header=F)
lab2.ped <- read.table("C:\Users\schwa\OneDrive\Documents\PH 2780 Genetic Epidemiology\Lab2", header=F)
lab2.ped <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab2", header=F)
lab2.ped <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab2/lab2.ped", header=F)
dim(lab2.ped)
lab2.ped[1:5,1:10]
table(lab2.ped$V1==lab2.ped$V2)
lab2.ped <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab2/lab2.ped", header=F)
dim(lab2.ped)
lab2.ped[1:5,1:10]
table(lab2.ped$V1==lab2.ped$V2)
View(lab2.ped)
lab2.map <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab2/lab2.map", header=F)
table(lab2.map$V1)
lab2.map.cetp <- subset(lab2.map, V4 >= 56961950 & V4 <= 56983845)
cetp.snps <- lab2.map.cetp$V2
write.table(cetp.snps, file="C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab2/cetp.snps", row.names=F, col.names=F, quote=F)
View(lab2.map.cetp)
lab2 <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab2/genopheno_lab2.txt", sep="\t", header=T, na.strings="X")
lab2 <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab2/genopheno_lab2.txt", sep="\t", header=T, na.strings="X")
tapply(lab2$age, lab2$sex, mean, na.rm = T)
tapply(lab2$age, lab2$sex, sd, na.rm = T)
tapply(lab2$trait2, lab2$sex, mean, na.rm = T)
tapply(lab2$trait2, lab2$sex, sd, na.rm = T)
tapply(lab2$covar1, lab2$sex, mean, na.rm = T)
tapply(lab2$covar1, lab2$sex, sd, na.rm = T)
table(lab2$smoking, lab2$sex)
table(lab2$trait1, lab2$sex)
View(lab2)
View(lab2)
View(lab2)
View(lab2)
tapply(lab2$age, lab2$sex, mean, na.rm = T)
tapply(lab2$age, lab2$sex, sd, na.rm = T)
tapply(lab2$trait2, lab2$sex, mean, na.rm = T)
tapply(lab2$trait2, lab2$sex, sd, na.rm = T)
tapply(lab2$trait3, lab2$sex, mean, na.rm = T)
tapply(lab2$trait3, lab2$sex, sd, na.rm = T)
tapply(lab2$trait4, lab2$sex, mean, na.rm = T)
tapply(lab2$trait4, lab2$sex, sd, na.rm = T)
tapply(lab2$trait5, lab2$sex, mean, na.rm = T)
tapply(lab2$trait5, lab2$sex, sd, na.rm = T)
tapply(lab2$covar1, lab2$sex, mean, na.rm = T)
tapply(lab2$covar1, lab2$sex, sd, na.rm = T)
table(lab2$smoking, lab2$sex)
table(lab2$trait1, lab2$sex)
table(lab2$trait1, lab2$sex)
table(lab2$trait6, lab2$sex)
table(lab2$trait7, lab2$sex)
?shapiro
?png
png("age.png")
par(mfrow=c(2,1))
hist(lab2$age, xlab="age", main="Histogram of Age", col="light blue")
qqnorm(lab2$age)
qqline(lab2$age, col = "red")
dev.off()
par(mfrow=c(2,1))
hist(lab2$age, xlab="age", main="Histogram of Age", col="light blue")
qqnorm(lab2$age)
qqline(lab2$age, col = "red")
par(mfrow=c(2,1))
hist(lab2$age, xlab="age", main="Histogram of Age", col="light blue")
qqnorm(lab2$age)
qqline(lab2$age, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait3, xlab="age", main="Histogram of Age", col="light blue")
qqnorm(lab2$trait3)
qqline(lab2$trait3, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait4, xlab="age", main="Histogram of Age", col="light blue")
qqnorm(lab2$trait4)
qqline(lab2$trait4, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait5, xlab="age", main="Histogram of Age", col="light blue")
qqnorm(lab2$trait5)
qqline(lab2$trait5, col = "red")
par(mfrow=c(2,1))
hist(lab2$covar1, xlab="age", main="Histogram of Age", col="light blue")
qqnorm(lab2$covar1)
qqline(lab2$covar1, col = "red")
par(mfrow=c(2,1))
hist(lab2$age, xlab="age", main="Histogram of Age", col="light blue")
qqnorm(lab2$age)
qqline(lab2$age, col = "red")
par(mfrow=c(2,1))
hist(lab2$age, xlab="trait2", main="Histogram of Trait2", col="light blue")
qqnorm(lab2$age)
qqline(lab2$age, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait3, xlab="trait3", main="Histogram of Trait3", col="light blue")
qqnorm(lab2$trait3)
qqline(lab2$trait3, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait4, xlab="trait4", main="Histogram of Trait4", col="light blue")
qqnorm(lab2$trait4)
qqline(lab2$trait4, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait5, xlab="trait5", main="Histogram of Trait5", col="light blue")
qqnorm(lab2$trait5)
qqline(lab2$trait5, col = "red")
par(mfrow=c(2,1))
hist(lab2$covar1, xlab="covar", main="Histogram of Covariance", col="light blue")
qqnorm(lab2$covar1)
qqline(lab2$covar1, col = "red")
par(mfrow=c(2,1))
hist(lab2$age, xlab="age", main="Histogram of Age", col="light blue")
qqnorm(lab2$age)
qqline(lab2$age, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait2, xlab="trait2", main="Histogram of Trait2", col="light blue")
qqnorm(lab2$trait2)
qqline(lab2$trait2, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait3, xlab="trait3", main="Histogram of Trait3", col="light blue")
qqnorm(lab2$trait3)
qqline(lab2$trait3, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait4, xlab="trait4", main="Histogram of Trait4", col="light blue")
qqnorm(lab2$trait4)
qqline(lab2$trait4, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait5, xlab="trait5", main="Histogram of Trait5", col="light blue")
qqnorm(lab2$trait5)
qqline(lab2$trait5, col = "red")
par(mfrow=c(2,1))
hist(lab2$covar1, xlab="covar", main="Histogram of Covariance", col="light blue")
qqnorm(lab2$covar1)
qqline(lab2$covar1, col = "red")
par(mfrow=c(2,1))
hist(log(lab2$covar1), xlab="log(covar)", main="Histogram of Log-Covariance", col="light blue")
qqnorm(log(lab2$covar1))
qqline(log(lab2$covar1), col = "red")
par(mfrow=c(2,1))
hist(log(lab2$trait2), xlab="log(trait2)", main="Histogram of Log-Trait2", col="light blue")
qqnorm(log(lab2$trait2))
qqline(log(lab2$trait2), col = "red")
par(mfrow=c(2,1))
hist(log(lab2$trait4), xlab="log(trait4)", main="Histogram of Log-Trait4", col="light blue")
qqnorm(log(lab2$trait4))
qqline(log(lab2$trait4), col = "red")
par(mfrow=c(2,1))
hist(log(lab2$trait5), xlab="log(trait5)", main="Histogram of Log-Trait5", col="light blue")
qqnorm(log(lab2$trait5))
qqline(log(lab2$trait5), col = "red")
par(mfrow=c(2,1))
hist(log(lab2$covar1), xlab="log(covar1)", main="Histogram of Log-Covariance", col="light blue")
qqnorm(log(lab2$covar1))
qqline(log(lab2$covar1), col = "red")
lab2$log_trait4 <- log(lab2$trait4)
lab2$log_trait5 <- log(lab2$trait5)
lab2$log_covar1 <- log(lab2$covar1)
write.table(lab2, file="/home/hchen/Lab2/merlin_lab2.csv", row.names=F, col.names=T, sep=",", quote=F, na="X")
lab2$log_trait4 <- log(lab2$trait4)
lab2$log_trait5 <- log(lab2$trait5)
lab2$log_covar1 <- log(lab2$covar1)
write.table(lab2, file="C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab2/merlin_lab2.csv", row.names=F, col.names=T, sep=",", quote=F, na="X")
#### Part 2 Quantitative traits
## Q1-2
lab2 <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab2/genopheno_lab2.txt", sep="\t", header=T, na.strings="X")
tapply(lab2$age, lab2$sex, mean, na.rm = T)
tapply(lab2$age, lab2$sex, sd, na.rm = T)
tapply(lab2$trait2, lab2$sex, mean, na.rm = T)
tapply(lab2$trait2, lab2$sex, sd, na.rm = T)
tapply(lab2$trait3, lab2$sex, mean, na.rm = T)
tapply(lab2$trait3, lab2$sex, sd, na.rm = T)
tapply(lab2$trait4, lab2$sex, mean, na.rm = T)
tapply(lab2$trait4, lab2$sex, sd, na.rm = T)
tapply(lab2$trait5, lab2$sex, mean, na.rm = T)
tapply(lab2$trait5, lab2$sex, sd, na.rm = T)
tapply(lab2$covar1, lab2$sex, mean, na.rm = T)
tapply(lab2$covar1, lab2$sex, sd, na.rm = T)
table(lab2$smoking, lab2$sex)
table(lab2$trait1, lab2$sex)
table(lab2$trait6, lab2$sex)
table(lab2$trait7, lab2$sex)
## Q3
par(mfrow=c(2,1))
hist(lab2$age, xlab="age", main="Histogram of Age", col="light blue")
qqnorm(lab2$age)
qqline(lab2$age, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait2, xlab="trait2", main="Histogram of Trait2", col="light blue")
qqnorm(lab2$trait2)
qqline(lab2$trait2, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait3, xlab="trait3", main="Histogram of Trait3", col="light blue")
qqnorm(lab2$trait3)
qqline(lab2$trait3, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait4, xlab="trait4", main="Histogram of Trait4", col="light blue")
qqnorm(lab2$trait4)
qqline(lab2$trait4, col = "red")
par(mfrow=c(2,1))
hist(lab2$trait5, xlab="trait5", main="Histogram of Trait5", col="light blue")
qqnorm(lab2$trait5)
qqline(lab2$trait5, col = "red")
par(mfrow=c(2,1))
hist(lab2$covar1, xlab="covar", main="Histogram of Covariance", col="light blue")
qqnorm(lab2$covar1)
qqline(lab2$covar1, col = "red")
# repeat for trait2, covar1, log trait2, log covar1
par(mfrow=c(2,1))
hist(log(lab2$trait2), xlab="log(trait2)", main="Histogram of Log-Trait2", col="light blue")
qqnorm(log(lab2$trait2))
qqline(log(lab2$trait2), col = "red")
par(mfrow=c(2,1))
hist(log(lab2$trait4), xlab="log(trait4)", main="Histogram of Log-Trait4", col="light blue")
qqnorm(log(lab2$trait4))
qqline(log(lab2$trait4), col = "red")
par(mfrow=c(2,1))
hist(log(lab2$trait5), xlab="log(trait5)", main="Histogram of Log-Trait5", col="light blue")
qqnorm(log(lab2$trait5))
qqline(log(lab2$trait5), col = "red")
par(mfrow=c(2,1))
hist(log(lab2$covar1), xlab="log(covar1)", main="Histogram of Log-Covariance", col="light blue")
qqnorm(log(lab2$covar1))
qqline(log(lab2$covar1), col = "red")
lab2$log_trait4 <- log(lab2$trait4)
lab2$log_trait5 <- log(lab2$trait5)
lab2$log_covar1 <- log(lab2$covar1)
write.table(lab2, file="C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab2/merlin_lab2.csv", row.names=F, col.names=T, sep=",", quote=F, na="X")
View(lab2)
View(lab2)
table(lab3.parent$trait7, lab3.parent$SNP4)
##################################################################################
#### Part 1 linkage of quantitative traits
## data preparation in R
lab3 <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab3/phenogeno_lab3.txt", sep="\t", header=T)
## trait 5 recode
lab3$trait5_new <- ifelse(is.na(lab3$trait5), "X", lab3$trait5)
## sort lab3 by famid
lab3.sorted <- lab3[order(lab3$famid),]
## save your lab3 dataset
write.table(lab3.sorted, file="C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab3/lab3.csv", row.names=F, col.names=T, sep=",", quote=F)
## work under UNIX
# check the number of columns in a file
# awk -F, '{if(NR==1) print NF}' lab3.csv
# awk -F, '{print $2,$1,$3,$4,$5,$28,$14,$15,$17,$18,$19,$20,$21,$22}' lab3.csv | sed 's/_/ /g' | sed -e '1d' > lab3.ped
# pedstats -d lab3.dat -p lab3.ped > lab3.pedstat
# merlin -d lab3.dat -p lab3.ped -m lab3.map --vc --pdf --prefix merlin_sglpt > lab3.sglpt
# merlin -d lab3.dat -p lab3.ped -m lab3.map --vc --grid 1 --pdf --prefix merlin_mltpt > lab3.mltpt
# merlin -d lab3.dat -p lab3.ped -m lab3.map --vc --grid 1 --useCovariates --pdf --prefix merlin_mltadj > lab3.mltadj
#### Part 2 Association Analysis ####
## data preparation in R
lab3 <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab3/phenogeno_lab3.txt", sep="\t", header=T, na.strings=c("NA",""))
## Q1
mytable.snp1 <- table(lab3$generate, lab3$SNP1)
prop.table(mytable.snp1, margin=1) # by row
mytable.snp2 <- table(lab3$generate, lab3$SNP2)
prop.table(mytable.snp2, margin=1)
mytable.snp3 <- table(lab3$generate, lab3$SNP3)
prop.table(mytable.snp3, margin=1)
mytable.snp4 <- table(lab3$generate, lab3$SNP4)
prop.table(mytable.snp4, margin=1)
mytable.snp5 <- table(lab3$generate, lab3$SNP5)
prop.table(mytable.snp5, margin=1)
## Q2
lab3$SNP1_add <- NA
lab3$SNP1_add <- ifelse(lab3$SNP1 == "GG", 0, lab3$SNP1_add)
lab3$SNP1_add <- ifelse(lab3$SNP1 == "AG", 1, lab3$SNP1_add)
lab3$SNP1_add <- ifelse(lab3$SNP1 == "AA", 2, lab3$SNP1_add)
lab3$SNP2_add <- NA
lab3$SNP2_add <- ifelse(lab3$SNP2 == "AA", 0, lab3$SNP2_add)
lab3$SNP2_add <- ifelse(lab3$SNP2 == "AG", 1, lab3$SNP2_add)
lab3$SNP2_add <- ifelse(lab3$SNP2 == "GG", 2, lab3$SNP2_add)
lab3$SNP3_add <- NA
lab3$SNP3_add <- ifelse(lab3$SNP3 == "CC", 0, lab3$SNP3_add)
lab3$SNP3_add <- ifelse(lab3$SNP3 == "CG", 1, lab3$SNP3_add)
lab3$SNP3_add <- ifelse(lab3$SNP3 == "GG", 2, lab3$SNP3_add)
lab3$SNP4_add <- NA
lab3$SNP4_add <- ifelse(lab3$SNP4 == "GG", 0, lab3$SNP4_add)
lab3$SNP4_add <- ifelse(lab3$SNP4 == "AG", 1, lab3$SNP4_add)
lab3$SNP4_add <- ifelse(lab3$SNP4 == "AA", 2, lab3$SNP4_add)
lab3$SNP5_add <- NA
lab3$SNP5_add <- ifelse(lab3$SNP5 == "AA", 0, lab3$SNP5_add)
lab3$SNP5_add <- ifelse(lab3$SNP5 == "AG", 1, lab3$SNP5_add)
lab3$SNP5_add <- ifelse(lab3$SNP5 == "GG", 2, lab3$SNP5_add)
table(lab3$SNP1,lab3$SNP1_add)
table(lab3$SNP2,lab3$SNP2_add)
table(lab3$SNP3,lab3$SNP3_add)
table(lab3$SNP4,lab3$SNP4_add)
table(lab3$SNP5,lab3$SNP5_add)
## Q3
library(dplyr)
library(tidyverse)
# Create table for Trait 6
trait6_table <- lab3 %>%
filter(trait6 %in% c(0, 1)) %>%
group_by(generate, trait6) %>%
summarise(count = n()) %>%
spread(trait6, count) %>%
mutate(Trait = "Trait6",
Control_to_Case_Ratio = `0` / `1`)
# Create table for Trait 7
trait7_table <- lab3 %>%
filter(trait7 %in% c(0, 1)) %>%
group_by(generate, trait7) %>%
summarise(count = n()) %>%
spread(trait7, count) %>%
mutate(Trait = "Trait7",
Control_to_Case_Ratio = `0` / `1`)
# Combine tables
combined_table <- rbind(trait6_table, trait7_table)
## Q4, ANOVA
lab3$trait5_log <- log(lab3$trait5)
lab3.gp <- subset(lab3, generate=="GP")
lab3.child <- subset(lab3, generate=="CHILD")
lab3.parent <- subset(lab3, generate=="PARENT")
summary(aov(trait5_log ~ SNP3, data = lab3.gp))
bartlett.test(trait5_log ~ SNP3, data = lab3.gp)
summary(aov(trait5_log ~ SNP3, data = lab3.parent))
bartlett.test(trait5_log ~ SNP3, data = lab3.parent)
summary(aov(trait5_log ~ SNP3, data = lab3.child))
bartlett.test(trait5_log ~ SNP3, data = lab3.child)
## Q5 LM
summary(lm(trait5_log ~ SNP3, data = lab3.gp))
summary(lm(trait5_log ~ SNP3, data = lab3.parent))
summary(lm(trait5_log ~ SNP3, data = lab3.child))
## Q6-7 chi-square
#GPs
table(lab3.gp$trait7, lab3.gp$SNP4)
chisq.test(table(lab3.gp$trait7, lab3.gp$SNP4))
fisher.test(table(lab3.gp$trait7, lab3.gp$SNP4))
#Parents
table(lab3.parent$trait7, lab3.parent$SNP4)
chisq.test(table(lab3.parent$trait7, lab3.parent$SNP4))
fisher.test(table(lab3.parent$trait7, lab3.parent$SNP4))
#Children
table(lab3.child$trait7, lab3.child$SNP4)
chisq.test(table(lab3.child$trait7, lab3.child$SNP4))
fisher.test(table(lab3.child$trait7, lab3.child$SNP4))
## Q8 logistic model
summary(glm(trait7 ~ SNP3_add, family=binomial(link="logit"), data=lab3.gp))
chisq.test(table(lab3.gp$trait7, lab3.gp$SNP3_add))
## Q9 Genotypic model
# recessive model
lab3.gp$SNP3_rec <- NA
lab3.gp$SNP3_rec <- ifelse(lab3.gp$SNP3 == "CC" | lab3.gp$SNP3 == "CG", 0, lab3.gp$SNP3_rec)
lab3.gp$SNP3_rec <- ifelse(lab3.gp$SNP3 == "GG", 1, lab3.gp$SNP3_rec)
# table(lab3.gp$SNP3, lab3.gp$SNP3_rec) ## check coding
summary(glm(trait7 ~ SNP3_rec, family=binomial(link="logit"), data=lab3.gp))
chisq.test(table(lab3.gp$trait7, lab3.gp$SNP3_rec))
# dominant model
lab3.gp$SNP3_dom <- NA
lab3.gp$SNP3_dom <- ifelse(lab3.gp$SNP3 == "CC", 0, lab3.gp$SNP3_dom)
lab3.gp$SNP3_dom <- ifelse(lab3.gp$SNP3 == "CG" | lab3.gp$SNP3 == "GG", 1, lab3.gp$SNP3_dom)
# table(lab3.gp$SNP3, lab3.gp$SNP3_dom) ## check coding
summary(glm(trait7 ~ SNP3_dom, family=binomial(link="logit"), data=lab3.gp))
chisq.test(table(lab3.gp$trait7, lab3.gp$SNP3_dom))
## Q10 adjusting cov
summary(glm(trait7 ~ SNP3_add + age + sex + covar1, family=binomial(link="logit"), data=lab3.gp))
exp(0.30657)  # OR for adjusted model
summary(glm(trait7 ~ SNP3_add, family=binomial(link="logit"), data=lab3.gp))
exp(0.3714)  # OR for unadjusted model
(1.449763-1.358757)/1.358757
#Parents
table(lab3.parent$trait7, lab3.parent$SNP4)
chisq.test(table(lab3.parent$trait7, lab3.parent$SNP4))
fisher.test(table(lab3.parent$trait7, lab3.parent$SNP4))
map <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab4/lab4.map", header=FALSE)
geno <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab4/lab4.ped", header=FALSE)
table(map$V1)
dim(map)
dim(geno)
View(map)
View(map)
save.image("C:/Users/schwa/OneDrive/Documents/PH 1976 Data & Predict/.RData")
map <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab4/lab4.map", header=FALSE)
geno <- read.table("C:/Users/schwa/OneDrive/Documents/PH 2780 Genetic Epidemiology/Lab4/lab4.ped", header=FALSE)
table(map$V1)
dim(map)
dim(geno)
unique(geno$V1)
unique(map$V1)
View(geno)
View(geno)
size(unique(geno$V1))
dim(unique(geno$V1))
length(unique(geno$V1))
cwd
source("~/PH 2780 Genetic Epidemiology/Lab4/Lab4.R", echo=TRUE)
setwd("~/PH 2780 Genetic Epidemiology/Lab4")
source("~/PH 2780 Genetic Epidemiology/Lab4/Lab4.R", echo=TRUE)
source("~/PH 2780 Genetic Epidemiology/Lab4/Lab4.R", echo=TRUE)
lambda
hdl.results <- read.table("hdl.assoc.linear", header = TRUE)
hdl.results.add <- subset(hdl.results, TEST == "ADD")
## Manhattan plot
pdf("MH.pdf")
plot(hdl.results.add$BP, -log10(hdl.results.add$P), col="blue")
dev.off()
## QQ plot
qqpval = function(x){
x <- sort(-log10(x[x>0]))
n <- length(x)
pp <- ppoints(n)
plot(-log10(rev(pp)), x, xlab="Expected", ylab="Observed")
abline(0,1,lty=2, col="purple")
}
pdf("QQ.pdf")
qqpval(hdl.results.add$P)
dev.off()
## lambda calculation
chi2 <- qchisq(hdl.results.add$P, df=1, lower.tail=F)
g <- median(chi2, na.rm=TRUE)
lambda <- round(g/qchisq(0.5, df=1), digits=5)
lambda
